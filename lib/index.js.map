{"version":3,"sources":["../source/index.js"],"names":["ArticleService","options","url","data","response","ok","json","items","headers","ErrorServerResponse","status","statusText","reponame","id","user","method","Accept","body","JSON","stringify","_id","ErrorNotFound","messages","userNotFound","articleNotFound","MicroServiceAPI"],"mappings":"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","sourcesContent":["import {\n  MicroServiceAPI,\n  ErrorNotFound,\n  ErrorServerResponse\n} from \"@frontender-magazine/service-api\";\n\n/**\n * Article Service API\n *\n * @namespace ArticleService\n * @module ArticleService\n * @class\n * @exports\n *\n * @param {string} url - service url\n * @param {string | null} [token = null] - user access tocken if available\n */\nexport default class ArticleService extends MicroServiceAPI {\n  /**\n   * Object with class service messages\n   * @type {Object}\n   */\n  static messages = {\n    articleNotFound: \"User not found\"\n  };\n\n  /**\n   * Get Articles list\n   *\n   * @method get\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {SearchParams} - Object with search params\n   * @return {ArticleList} - array of posts\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Read articles list</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const list = await Article.get();\n   * })();\n   */\n  get = async options => {\n    const response = await super.request(this.url, {\n      data: {\n        ...options\n      }\n    });\n    if (response.ok) {\n      const items = await response.json();\n      return {\n        items,\n        headers: response.headers\n      };\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Get Article connected to this repository name\n   *\n   * @method getByReponame\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {SearchParams} - Object with search params\n   * @return {ArticleList} - array of posts\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Read articles list</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const list = await Article.getByReponame('the-art-of-html-semantics-pt1');\n   * })();\n   */\n  getByReponame = async reponame => {\n    const response = await super.request(`${this.url}/repository/${reponame}`);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Get Article connected to this repository name\n   *\n   * @method getById\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {SearchParams} - Object with search params\n   * @return {ArticleList} - array of posts\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Read articles list</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const list = await Article.getById('5a04f3ee3d3c231d5d8e009d');\n   * })();\n   */\n  getById = async id => {\n    const response = await super.request(`${this.url}/${id}`);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Create article\n   *\n   * @method post\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {Article} - user object\n   * @return {Article} - created user\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Create article</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const details = await Article.post({\n   *    \"url\":\"http://hansmuller-webkit.blogspot.ru/2013/02/padding-rounded-rectangle.html\",\n   *    \"domain\":\"blogspot.ru\",\n   *    \"title\":\"Padding the Rounded Rectangle\",\n   *    \"published\": new Date(\"2013-02-28\"),\n   *    \"lang\":\"eng\"\n   *   });\n   * })();\n   */\n  post = async user => {\n    const options = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(user)\n    };\n    const response = await super.request(`${this.url}`, options);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Replace article\n   *\n   * @method put\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {Article} - updated article object with _id included\n   * @return {Article} - created article\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Replace article</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const details = await Article.put({\n   *    \"url\":\"http://hansmuller-webkit.blogspot.ru/2013/02/padding-rounded-rectangle.html\",\n   *    \"domain\":\"blogspot.ru\",\n   *    \"title\":\"Padding the Rounded Rectangle\",\n   *    \"published\": new Date(\"2013-02-28\"),\n   *    \"lang\":\"eng\",\n   *    \"_id\": \"59e11e3bbce79c073e548a9a\"\n   *   });\n   * })();\n   */\n  put = async user => {\n    const options = {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(user)\n    };\n    const response = await super.request(`${this.url}${user._id}`, options);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 404)\n      throw new ErrorNotFound(ArticleService.messages.userNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Update article\n   *\n   * @method patch\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {Article} - updated article object with _id included\n   * @return {Article} - updated article\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Patch article</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const details = await Article.patch({\n   *    \"_id\": \"59e11e3bbce79c073e548a9a\",\n   *    \"title\": \"New article title\"\n   *   });\n   * })();\n   */\n  patch = async user => {\n    const options = {\n      method: \"PATCH\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(user)\n    };\n    const response = await super.request(`${this.url}${user._id}`, options);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 404)\n      throw new ErrorNotFound(ArticleService.messages.userNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Search params\n   *\n   * @namespace ArticleService\n   * @typedef {SearchParams} - search params list\n   *\n   * @property {number} page - page number\n   * @property {number} perPage - articles per page\n   * @property {string} s - keyword to search in domain and title\n   */\n\n  /**\n   * Article list object\n   *\n   * @namespace ArticleService\n   * @typedef {ArticleList} Array of articles\n   *\n   * @property {Array.<Article>} - array of articles\n   */\n\n  /**\n   * Article object\n   *\n   * @namespace ArticleService\n   * @typedef {Article} Article representation\n   *\n   * @property {string} url - article url\n   * @property {string} domain - article domain\n   * @property {string} title - article title\n   * @property {string} lang - 3 character lang code\n   * @property {Date} published - publication timestamp\n   *\n   * @property {number} characters - characters count\n   *\n   * @property {Array.<string>} author - article with user id's\n   * @property {Array.<Contributor>} contributors - array of contributors\n   * @property {Array.<string>} tags - array of article tags\n   *\n   * @property {boolean} team - is user part of the team\n   * @property {boolean} core - is user part of the core team\n   * @property {boolean} translator - is user translator\n   * @property {boolean} editor - is user editor\n   * @property {boolean} developer - is user developer\n   * @property {boolean} author - is user author\n   * @property {number} salary - salary, if user part of the core team\n   *\n   * @property {string} reponame - name of repository with translation, if applyable\n   * @property {Article.<Article>} translations - array of translations of this articles\n   */\n\n  /**\n   * Contributor object\n   *\n   * @namespace ArticleService\n   * @typedef {Contributor} Contributor\n   *\n   * @property {string} name - contributor name or login if no name available\n   * @property {string} url - url to contributor resource\n   */\n\n  /**\n   * Read specific users details\n   *\n   * @method details\n   * @memberof ArticleService\n   * @async\n   * @public\n   *\n   * @param {string} id - user id\n   * @return {Article} - article details\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with other error status\n   *\n   * @example <caption>Get article</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const details = await Article.details('59e11e3bbce79c073e548a9a');\n   * })();\n   */\n  details = async id => {\n    const response = await super.request(`${this.url}${id}`);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 404)\n      throw new ErrorNotFound(ArticleService.messages.userNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Delete article by id\n   *\n   * @method delete\n   * @memberof ArticleService\n   * @async\n   * @public\n   *\n   * @param {string} id - article id\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with other error status\n   *\n   * @example <caption>Delete article by id</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   await Article.delete('59e11e3bbce79c073e548a9a');\n   * })();\n   */\n  delete = async id => {\n    const options = {\n      method: \"DELETE\"\n    };\n    const response = await super.request(`${this.url}${id}`, options);\n    if (response.ok) return;\n    if (response.status === 404)\n      throw new ErrorNotFound(ArticleService.messages.articleNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n}\n"],"file":"index.js"}
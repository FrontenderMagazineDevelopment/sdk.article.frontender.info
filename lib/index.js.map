{"version":3,"sources":["../source/index.js"],"names":["ArticleService","get","options","url","data","response","ok","json","status","statusText","getByReponame","reponame","getById","id","post","user","method","headers","Accept","body","JSON","stringify","put","_id","messages","userNotFound","patch","details","delete","articleNotFound"],"mappings":"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","file":"index.js","sourcesContent":["import 'babel-polyfill';\nimport { TMMicroServiceAPI, ErrorNotFound, ErrorServerResponse } from 'tm-service-api';\n\n/**\n * Article Service API\n *\n * @namespace ArticleService\n * @module ArticleService\n * @class\n * @exports\n *\n * @param {string} url - service url\n * @param {string | null} [token = null] - user access tocken if available\n */\nexport default class ArticleService extends TMMicroServiceAPI {\n  /**\n   * Object with class service messages\n   * @type {Object}\n   */\n  static messages = {\n    articleNotFound: 'User not found',\n  };\n\n  /**\n   * Get Articles list\n   *\n   * @method get\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {SearchParams} - Object with search params\n   * @return {ArticleList} - array of posts\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Read articles list</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/', 'Bearer 8237612j.h3g12jh.32j13h');\n   *   const list = await Article.get();\n   * })();\n   */\n  get = async options => {\n    const response = await super.request(`${this.url}`, {\n      data: {\n        ...options,\n      },\n    });\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Get Article connected to this repository name\n   *\n   * @method get\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {SearchParams} - Object with search params\n   * @return {ArticleList} - array of posts\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Read articles list</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/', 'Bearer 8237612j.h3g12jh.32j13h');\n   *   const list = await Article.get();\n   * })();\n   */\n  getByReponame = async reponame => {\n    const response = await super.request(`${this.url}/repository/${reponame}`);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Get Article connected to this repository name\n   *\n   * @method get\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {SearchParams} - Object with search params\n   * @return {ArticleList} - array of posts\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Read articles list</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/', 'Bearer 8237612j.h3g12jh.32j13h');\n   *   const list = await Article.get();\n   * })();\n   */\n  getById = async id => {\n    const response = await super.request(`${this.url}/${id}`);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Create article\n   *\n   * @method post\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {Article} - user object\n   * @return {Article} - created user\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Create article</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const details = await Article.post({\n   *    \"url\":\"http://hansmuller-webkit.blogspot.ru/2013/02/padding-rounded-rectangle.html\",\n   *    \"domain\":\"blogspot.ru\",\n   *    \"title\":\"Padding the Rounded Rectangle\",\n   *    \"published\": new Date(\"2013-02-28\"),\n   *    \"lang\":\"eng\"\n   *   });\n   * })();\n   */\n  post = async user => {\n    const options = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    };\n    const response = await super.request(`${this.url}`, options);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Replace article\n   *\n   * @method put\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {Article} - updated article object with _id included\n   * @return {Article} - created article\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Replace article</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const details = await Article.put({\n   *    \"url\":\"http://hansmuller-webkit.blogspot.ru/2013/02/padding-rounded-rectangle.html\",\n   *    \"domain\":\"blogspot.ru\",\n   *    \"title\":\"Padding the Rounded Rectangle\",\n   *    \"published\": new Date(\"2013-02-28\"),\n   *    \"lang\":\"eng\",\n   *    \"_id\": \"59e11e3bbce79c073e548a9a\"\n   *   });\n   * })();\n   */\n  put = async user => {\n    const options = {\n      method: 'PUT',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    };\n    const response = await super.request(`${this.url}${user._id}`, options);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 404) throw new ErrorNotFound(ArticleService.messages.userNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Update article\n   *\n   * @method patch\n   * @async\n   * @public\n   * @memberof ArticleService\n   *\n   * @param {Article} - updated article object with _id included\n   * @return {Article} - updated article\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with error status\n   *\n   * @example <caption>Patch article</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const details = await Article.patch({\n   *    \"_id\": \"59e11e3bbce79c073e548a9a\",\n   *    \"title\": \"New article title\"\n   *   });\n   * })();\n   */\n  patch = async user => {\n    const options = {\n      method: 'PATCH',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    };\n    const response = await super.request(`${this.url}${user._id}`, options);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 404) throw new ErrorNotFound(ArticleService.messages.userNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Search params\n   *\n   * @namespace ArticleService\n   * @typedef {SearchParams} - search params list\n   *\n   * @property {number} page - page number\n   * @property {number} perPage - articles per page\n   * @property {string} s - keyword to search in domain and title\n   */\n\n  /**\n   * Article list object\n   *\n   * @namespace ArticleService\n   * @typedef {ArticleList} Array of articles\n   *\n   * @property {Array.<Article>} - array of articles\n   */\n\n  /**\n   * Article object\n   *\n   * @namespace ArticleService\n   * @typedef {Article} Article representation\n   *\n   * @property {string} url - article url\n   * @property {string} domain - article domain\n   * @property {string} title - article title\n   * @property {string} lang - 3 character lang code\n   * @property {Date} published - publication timestamp\n   *\n   * @property {number} characters - characters count\n   *\n   * @property {Array.<string>} author - article with user id's\n   * @property {Array.<Contributor>} contributors - array of contributors\n   * @property {Array.<string>} tags - array of article tags\n   *\n   * @property {boolean} team - is user part of the team\n   * @property {boolean} core - is user part of the core team\n   * @property {boolean} translator - is user translator\n   * @property {boolean} editor - is user editor\n   * @property {boolean} developer - is user developer\n   * @property {boolean} author - is user author\n   * @property {number} salary - salary, if user part of the core team\n   *\n   * @property {string} reponame - name of repository with translation, if applyable\n   * @property {Article.<Article>} translations - array of translations of this articles\n   */\n\n  /**\n   * Contributor object\n   *\n   * @namespace ArticleService\n   * @typedef {Contributor} Contributor\n   *\n   * @property {string} name - contributor name or login if no name available\n   * @property {string} url - url to contributor resource\n   */\n\n  /**\n   * Read specific users details\n   *\n   * @method details\n   * @memberof ArticleService\n   * @async\n   * @public\n   *\n   * @param {string} id - user id\n   * @return {Article} - article details\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with other error status\n   *\n   * @example <caption>Get article</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   const details = await Article.details('59e11e3bbce79c073e548a9a');\n   * })();\n   */\n  details = async id => {\n    const response = await super.request(`${this.url}${id}`);\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 404) throw new ErrorNotFound(ArticleService.messages.userNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Delete article by id\n   *\n   * @method delete\n   * @memberof ArticleService\n   * @async\n   * @public\n   *\n   * @param {string} id - article id\n   * @throw {ErrorNotFound} - user with this id not found\n   * @throw {ErrorServerResponse} - server response with other error status\n   *\n   * @example <caption>Delete article by id</caption>\n   * (async () => {\n   *   const Article = new ArticleService('https://article.frontender.info/');\n   *   await Article.delete('59e11e3bbce79c073e548a9a');\n   * })();\n   */\n  delete = async id => {\n    const options = {\n      method: 'DELETE',\n    };\n    const response = await super.request(`${this.url}${id}`, options);\n    if (response.ok) return;\n    if (response.status === 404) throw new ErrorNotFound(ArticleService.messages.articleNotFound);\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n}\n"]}